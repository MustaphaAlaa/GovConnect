// <auto-generated />
using System;
using DataConfigurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataConfigurations.Migrations
{
    [DbContext(typeof(GovConnectDbContext))]
    [Migration("20250108014709_Create_SP_InsertAppointment")]
    partial class Create_SP_InsertAppointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.ApplicationModels.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ApplicationStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ServiceCategoryId")
                        .HasColumnType("smallint");

                    b.Property<byte>("ServicePurposeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("ServicePurposeId");

                    b.Property<Guid?>("UpdatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId");

                    b.HasIndex("UpdatedByEmployeeId");

                    b.HasIndex("UserId");

                    b.HasIndex("ServicePurposeId", "ServiceCategoryId");

                    b.ToTable("Applicataions");
                });

            modelBuilder.Entity("Models.ApplicationModels.InternationalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int>("LocalDrivingLicenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LocalDrivingLicenseId");

                    b.ToTable("InternationalDrivingLicenseApplications");
                });

            modelBuilder.Entity("Models.ApplicationModels.LocalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<short>("LicenseClassId")
                        .HasColumnType("smallint");

                    b.Property<string>("ReasonForTheApplication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseClassId");

                    b.ToTable("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceCategory", b =>
                {
                    b.Property<short>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ServiceCategoryId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceCategoryId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            ServiceCategoryId = (short)1,
                            Category = "Local Driving License"
                        },
                        new
                        {
                            ServiceCategoryId = (short)2,
                            Category = "International Driving License"
                        },
                        new
                        {
                            ServiceCategoryId = (short)3,
                            Category = "Passport"
                        },
                        new
                        {
                            ServiceCategoryId = (short)4,
                            Category = "National Identity Card"
                        });
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceFees", b =>
                {
                    b.Property<byte>("ServicePurposeId")
                        .HasColumnType("tinyint");

                    b.Property<short>("ServiceCategoryId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServicePurposeId", "ServiceCategoryId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServicesFees");

                    b.HasData(
                        new
                        {
                            ServicePurposeId = (byte)1,
                            ServiceCategoryId = (short)1,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)2,
                            ServiceCategoryId = (short)1,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)5,
                            ServiceCategoryId = (short)1,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)6,
                            ServiceCategoryId = (short)1,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)3,
                            ServiceCategoryId = (short)1,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)4,
                            ServiceCategoryId = (short)1,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)1,
                            ServiceCategoryId = (short)2,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)2,
                            ServiceCategoryId = (short)2,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)3,
                            ServiceCategoryId = (short)2,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)4,
                            ServiceCategoryId = (short)2,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)1,
                            ServiceCategoryId = (short)3,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)2,
                            ServiceCategoryId = (short)3,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)3,
                            ServiceCategoryId = (short)3,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)4,
                            ServiceCategoryId = (short)3,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)1,
                            ServiceCategoryId = (short)4,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)2,
                            ServiceCategoryId = (short)4,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)3,
                            ServiceCategoryId = (short)4,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ServicePurposeId = (byte)4,
                            ServiceCategoryId = (short)4,
                            Fees = 0m,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Models.ApplicationModels.ServicePurpose", b =>
                {
                    b.Property<byte>("ServicePurposeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicePurposeId");

                    b.ToTable("ServicesPurposes", (string)null);

                    b.HasData(
                        new
                        {
                            ServicePurposeId = (byte)1,
                            Purpose = "New"
                        },
                        new
                        {
                            ServicePurposeId = (byte)2,
                            Purpose = "Renew"
                        },
                        new
                        {
                            ServicePurposeId = (byte)3,
                            Purpose = "Replacement For Damage"
                        },
                        new
                        {
                            ServicePurposeId = (byte)4,
                            Purpose = "Replacement For Lost"
                        },
                        new
                        {
                            ServicePurposeId = (byte)5,
                            Purpose = "Release"
                        },
                        new
                        {
                            ServicePurposeId = (byte)6,
                            Purpose = "Retake Test"
                        });
                });

            modelBuilder.Entity("Models.Countries.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryCode = "AFG",
                            CountryName = "Afghanistan"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryCode = "ALB",
                            CountryName = "Albania"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryCode = "DZA",
                            CountryName = "Algeria"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryCode = "AND",
                            CountryName = "Andorra"
                        },
                        new
                        {
                            CountryId = 5,
                            CountryCode = "AGO",
                            CountryName = "Angola"
                        },
                        new
                        {
                            CountryId = 6,
                            CountryCode = "ATG",
                            CountryName = "Antigua and Barbuda"
                        },
                        new
                        {
                            CountryId = 7,
                            CountryCode = "ARG",
                            CountryName = "Argentina"
                        },
                        new
                        {
                            CountryId = 8,
                            CountryCode = "ARM",
                            CountryName = "Armenia"
                        },
                        new
                        {
                            CountryId = 9,
                            CountryCode = "AUS",
                            CountryName = "Australia"
                        },
                        new
                        {
                            CountryId = 10,
                            CountryCode = "AUT",
                            CountryName = "Austria"
                        },
                        new
                        {
                            CountryId = 11,
                            CountryCode = "AZE",
                            CountryName = "Azerbaijan"
                        },
                        new
                        {
                            CountryId = 12,
                            CountryCode = "BHS",
                            CountryName = "Bahamas"
                        },
                        new
                        {
                            CountryId = 13,
                            CountryCode = "BHR",
                            CountryName = "Bahrain"
                        },
                        new
                        {
                            CountryId = 14,
                            CountryCode = "BGD",
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            CountryId = 15,
                            CountryCode = "BRB",
                            CountryName = "Barbados"
                        },
                        new
                        {
                            CountryId = 16,
                            CountryCode = "BLR",
                            CountryName = "Belarus"
                        },
                        new
                        {
                            CountryId = 17,
                            CountryCode = "BEL",
                            CountryName = "Belgium"
                        },
                        new
                        {
                            CountryId = 18,
                            CountryCode = "BLZ",
                            CountryName = "Belize"
                        },
                        new
                        {
                            CountryId = 19,
                            CountryCode = "BEN",
                            CountryName = "Benin"
                        },
                        new
                        {
                            CountryId = 20,
                            CountryCode = "BTN",
                            CountryName = "Bhutan"
                        },
                        new
                        {
                            CountryId = 21,
                            CountryCode = "BOL",
                            CountryName = "Bolivia"
                        },
                        new
                        {
                            CountryId = 22,
                            CountryCode = "BIH",
                            CountryName = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryId = 23,
                            CountryCode = "BWA",
                            CountryName = "Botswana"
                        },
                        new
                        {
                            CountryId = 24,
                            CountryCode = "BRA",
                            CountryName = "Brazil"
                        },
                        new
                        {
                            CountryId = 25,
                            CountryCode = "BRN",
                            CountryName = "Brunei"
                        },
                        new
                        {
                            CountryId = 26,
                            CountryCode = "BGR",
                            CountryName = "Bulgaria"
                        },
                        new
                        {
                            CountryId = 27,
                            CountryCode = "BFA",
                            CountryName = "Burkina Faso"
                        },
                        new
                        {
                            CountryId = 28,
                            CountryCode = "BDI",
                            CountryName = "Burundi"
                        },
                        new
                        {
                            CountryId = 29,
                            CountryCode = "CPV",
                            CountryName = "Cabo Verde"
                        },
                        new
                        {
                            CountryId = 30,
                            CountryCode = "KHM",
                            CountryName = "Cambodia"
                        },
                        new
                        {
                            CountryId = 31,
                            CountryCode = "CMR",
                            CountryName = "Cameroon"
                        },
                        new
                        {
                            CountryId = 32,
                            CountryCode = "CAN",
                            CountryName = "Canada"
                        },
                        new
                        {
                            CountryId = 33,
                            CountryCode = "CAF",
                            CountryName = "Central African Republic"
                        },
                        new
                        {
                            CountryId = 34,
                            CountryCode = "TCD",
                            CountryName = "Chad"
                        },
                        new
                        {
                            CountryId = 35,
                            CountryCode = "CHL",
                            CountryName = "Chile"
                        },
                        new
                        {
                            CountryId = 36,
                            CountryCode = "CHN",
                            CountryName = "China"
                        },
                        new
                        {
                            CountryId = 37,
                            CountryCode = "COL",
                            CountryName = "Colombia"
                        },
                        new
                        {
                            CountryId = 38,
                            CountryCode = "COM",
                            CountryName = "Comoros"
                        },
                        new
                        {
                            CountryId = 39,
                            CountryCode = "COD",
                            CountryName = "Congo Democratic Republic of the"
                        },
                        new
                        {
                            CountryId = 40,
                            CountryCode = "COG",
                            CountryName = "Congo Republic of the"
                        },
                        new
                        {
                            CountryId = 41,
                            CountryCode = "CRI",
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            CountryId = 42,
                            CountryCode = "CIV",
                            CountryName = "Cote d Ivoire"
                        },
                        new
                        {
                            CountryId = 43,
                            CountryCode = "HRV",
                            CountryName = "Croatia"
                        },
                        new
                        {
                            CountryId = 44,
                            CountryCode = "CUB",
                            CountryName = "Cuba"
                        },
                        new
                        {
                            CountryId = 45,
                            CountryCode = "CYP",
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            CountryId = 46,
                            CountryCode = "CZE",
                            CountryName = "Czechia"
                        },
                        new
                        {
                            CountryId = 47,
                            CountryCode = "DNK",
                            CountryName = "Denmark"
                        },
                        new
                        {
                            CountryId = 48,
                            CountryCode = "DJI",
                            CountryName = "Djibouti"
                        },
                        new
                        {
                            CountryId = 49,
                            CountryCode = "DMA",
                            CountryName = "Dominica"
                        },
                        new
                        {
                            CountryId = 50,
                            CountryCode = "DOM",
                            CountryName = "Dominican Republic"
                        },
                        new
                        {
                            CountryId = 51,
                            CountryCode = "ECU",
                            CountryName = "Ecuador"
                        },
                        new
                        {
                            CountryId = 52,
                            CountryCode = "EGY",
                            CountryName = "Egypt"
                        },
                        new
                        {
                            CountryId = 53,
                            CountryCode = "SLV",
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            CountryId = 54,
                            CountryCode = "GNQ",
                            CountryName = "Equatorial Guinea"
                        },
                        new
                        {
                            CountryId = 55,
                            CountryCode = "ERI",
                            CountryName = "Eritrea"
                        },
                        new
                        {
                            CountryId = 56,
                            CountryCode = "EST",
                            CountryName = "Estonia"
                        },
                        new
                        {
                            CountryId = 57,
                            CountryCode = "SWZ",
                            CountryName = "Eswatini"
                        },
                        new
                        {
                            CountryId = 58,
                            CountryCode = "ETH",
                            CountryName = "Ethiopia"
                        },
                        new
                        {
                            CountryId = 59,
                            CountryCode = "FJI",
                            CountryName = "Fiji"
                        },
                        new
                        {
                            CountryId = 60,
                            CountryCode = "FIN",
                            CountryName = "Finland"
                        },
                        new
                        {
                            CountryId = 61,
                            CountryCode = "FRA",
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 62,
                            CountryCode = "GAB",
                            CountryName = "Gabon"
                        },
                        new
                        {
                            CountryId = 63,
                            CountryCode = "GMB",
                            CountryName = "Gambia"
                        },
                        new
                        {
                            CountryId = 64,
                            CountryCode = "GEO",
                            CountryName = "Georgia"
                        },
                        new
                        {
                            CountryId = 65,
                            CountryCode = "DEU",
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = 66,
                            CountryCode = "GHA",
                            CountryName = "Ghana"
                        },
                        new
                        {
                            CountryId = 67,
                            CountryCode = "GRC",
                            CountryName = "Greece"
                        },
                        new
                        {
                            CountryId = 68,
                            CountryCode = "GRD",
                            CountryName = "Grenada"
                        },
                        new
                        {
                            CountryId = 69,
                            CountryCode = "GTM",
                            CountryName = "Guatemala"
                        },
                        new
                        {
                            CountryId = 70,
                            CountryCode = "GIN",
                            CountryName = "Guinea"
                        },
                        new
                        {
                            CountryId = 71,
                            CountryCode = "GNB",
                            CountryName = "Guinea Bissau"
                        },
                        new
                        {
                            CountryId = 72,
                            CountryCode = "GUY",
                            CountryName = "Guyana"
                        },
                        new
                        {
                            CountryId = 73,
                            CountryCode = "HTI",
                            CountryName = "Haiti"
                        },
                        new
                        {
                            CountryId = 74,
                            CountryCode = "HND",
                            CountryName = "Honduras"
                        },
                        new
                        {
                            CountryId = 75,
                            CountryCode = "HUN",
                            CountryName = "Hungary"
                        },
                        new
                        {
                            CountryId = 76,
                            CountryCode = "ISL",
                            CountryName = "Iceland"
                        },
                        new
                        {
                            CountryId = 77,
                            CountryCode = "IND",
                            CountryName = "India"
                        },
                        new
                        {
                            CountryId = 78,
                            CountryCode = "IDN",
                            CountryName = "Indonesia"
                        },
                        new
                        {
                            CountryId = 79,
                            CountryCode = "IRN",
                            CountryName = "Iran"
                        },
                        new
                        {
                            CountryId = 80,
                            CountryCode = "IRQ",
                            CountryName = "Iraq"
                        },
                        new
                        {
                            CountryId = 81,
                            CountryCode = "IRL",
                            CountryName = "Ireland"
                        },
                        new
                        {
                            CountryId = 83,
                            CountryCode = "ITA",
                            CountryName = "Italy"
                        },
                        new
                        {
                            CountryId = 84,
                            CountryCode = "JAM",
                            CountryName = "Jamaica"
                        },
                        new
                        {
                            CountryId = 85,
                            CountryCode = "JPN",
                            CountryName = "Japan"
                        },
                        new
                        {
                            CountryId = 86,
                            CountryCode = "JOR",
                            CountryName = "Jordan"
                        },
                        new
                        {
                            CountryId = 87,
                            CountryCode = "KAZ",
                            CountryName = "Kazakhstan"
                        },
                        new
                        {
                            CountryId = 88,
                            CountryCode = "KEN",
                            CountryName = "Kenya"
                        },
                        new
                        {
                            CountryId = 89,
                            CountryCode = "KIR",
                            CountryName = "Kiribati"
                        },
                        new
                        {
                            CountryId = 90,
                            CountryCode = "PRK",
                            CountryName = "Korea North"
                        },
                        new
                        {
                            CountryId = 91,
                            CountryCode = "KOR",
                            CountryName = "Korea South"
                        },
                        new
                        {
                            CountryId = 92,
                            CountryCode = "XKX",
                            CountryName = "Kosovo"
                        },
                        new
                        {
                            CountryId = 93,
                            CountryCode = "KWT",
                            CountryName = "Kuwait"
                        },
                        new
                        {
                            CountryId = 94,
                            CountryCode = "KGZ",
                            CountryName = "Kyrgyzstan"
                        },
                        new
                        {
                            CountryId = 95,
                            CountryCode = "LAO",
                            CountryName = "Laos"
                        },
                        new
                        {
                            CountryId = 96,
                            CountryCode = "LVA",
                            CountryName = "Latvia"
                        },
                        new
                        {
                            CountryId = 97,
                            CountryCode = "LBN",
                            CountryName = "Lebanon"
                        },
                        new
                        {
                            CountryId = 98,
                            CountryCode = "LSO",
                            CountryName = "Lesotho"
                        },
                        new
                        {
                            CountryId = 99,
                            CountryCode = "LBR",
                            CountryName = "Liberia"
                        },
                        new
                        {
                            CountryId = 100,
                            CountryCode = "LBY",
                            CountryName = "Libya"
                        },
                        new
                        {
                            CountryId = 101,
                            CountryCode = "LIE",
                            CountryName = "Liechtenstein"
                        },
                        new
                        {
                            CountryId = 102,
                            CountryCode = "LTU",
                            CountryName = "Lithuania"
                        },
                        new
                        {
                            CountryId = 103,
                            CountryCode = "LUX",
                            CountryName = "Luxembourg"
                        },
                        new
                        {
                            CountryId = 104,
                            CountryCode = "MDG",
                            CountryName = "Madagascar"
                        },
                        new
                        {
                            CountryId = 105,
                            CountryCode = "MWI",
                            CountryName = "Malawi"
                        },
                        new
                        {
                            CountryId = 106,
                            CountryCode = "MYS",
                            CountryName = "Malaysia"
                        },
                        new
                        {
                            CountryId = 107,
                            CountryCode = "MDV",
                            CountryName = "Maldives"
                        },
                        new
                        {
                            CountryId = 108,
                            CountryCode = "MLI",
                            CountryName = "Mali"
                        },
                        new
                        {
                            CountryId = 109,
                            CountryCode = "MLT",
                            CountryName = "Malta"
                        },
                        new
                        {
                            CountryId = 110,
                            CountryCode = "MHL",
                            CountryName = "Marshall Islands"
                        },
                        new
                        {
                            CountryId = 111,
                            CountryCode = "MRT",
                            CountryName = "Mauritania"
                        },
                        new
                        {
                            CountryId = 112,
                            CountryCode = "MUS",
                            CountryName = "Mauritius"
                        },
                        new
                        {
                            CountryId = 113,
                            CountryCode = "MEX",
                            CountryName = "Mexico"
                        },
                        new
                        {
                            CountryId = 114,
                            CountryCode = "FSM",
                            CountryName = "Micronesia"
                        },
                        new
                        {
                            CountryId = 115,
                            CountryCode = "MDA",
                            CountryName = "Moldova"
                        },
                        new
                        {
                            CountryId = 116,
                            CountryCode = "MCO",
                            CountryName = "Monaco"
                        },
                        new
                        {
                            CountryId = 117,
                            CountryCode = "MNG",
                            CountryName = "Mongolia"
                        },
                        new
                        {
                            CountryId = 118,
                            CountryCode = "MNE",
                            CountryName = "Montenegro"
                        },
                        new
                        {
                            CountryId = 119,
                            CountryCode = "MAR",
                            CountryName = "Morocco"
                        },
                        new
                        {
                            CountryId = 120,
                            CountryCode = "MOZ",
                            CountryName = "Mozambique"
                        },
                        new
                        {
                            CountryId = 121,
                            CountryCode = "MMR",
                            CountryName = "Myanmar"
                        },
                        new
                        {
                            CountryId = 122,
                            CountryCode = "NAM",
                            CountryName = "Namibia"
                        },
                        new
                        {
                            CountryId = 123,
                            CountryCode = "NRU",
                            CountryName = "Nauru"
                        },
                        new
                        {
                            CountryId = 124,
                            CountryCode = "NPL",
                            CountryName = "Nepal"
                        },
                        new
                        {
                            CountryId = 125,
                            CountryCode = "NLD",
                            CountryName = "Netherlands"
                        },
                        new
                        {
                            CountryId = 126,
                            CountryCode = "NZL",
                            CountryName = "New Zealand"
                        },
                        new
                        {
                            CountryId = 127,
                            CountryCode = "NIC",
                            CountryName = "Nicaragua"
                        },
                        new
                        {
                            CountryId = 128,
                            CountryCode = "NER",
                            CountryName = "Niger"
                        },
                        new
                        {
                            CountryId = 129,
                            CountryCode = "NGA",
                            CountryName = "Nigeria"
                        },
                        new
                        {
                            CountryId = 130,
                            CountryCode = "MKD",
                            CountryName = "North Macedonia"
                        },
                        new
                        {
                            CountryId = 131,
                            CountryCode = "NOR",
                            CountryName = "Norway"
                        },
                        new
                        {
                            CountryId = 132,
                            CountryCode = "OMN",
                            CountryName = "Oman"
                        },
                        new
                        {
                            CountryId = 133,
                            CountryCode = "PAK",
                            CountryName = "Pakistan"
                        },
                        new
                        {
                            CountryId = 134,
                            CountryCode = "PLW",
                            CountryName = "Palau"
                        },
                        new
                        {
                            CountryId = 135,
                            CountryCode = "PSE",
                            CountryName = "Palestine"
                        },
                        new
                        {
                            CountryId = 136,
                            CountryCode = "PAN",
                            CountryName = "Panama"
                        },
                        new
                        {
                            CountryId = 137,
                            CountryCode = "PNG",
                            CountryName = "Papua New Guinea"
                        },
                        new
                        {
                            CountryId = 138,
                            CountryCode = "PRY",
                            CountryName = "Paraguay"
                        },
                        new
                        {
                            CountryId = 139,
                            CountryCode = "PER",
                            CountryName = "Peru"
                        },
                        new
                        {
                            CountryId = 140,
                            CountryCode = "PHL",
                            CountryName = "Philippines"
                        },
                        new
                        {
                            CountryId = 141,
                            CountryCode = "POL",
                            CountryName = "Poland"
                        },
                        new
                        {
                            CountryId = 142,
                            CountryCode = "PRT",
                            CountryName = "Portugal"
                        },
                        new
                        {
                            CountryId = 143,
                            CountryCode = "QAT",
                            CountryName = "Qatar"
                        },
                        new
                        {
                            CountryId = 144,
                            CountryCode = "ROU",
                            CountryName = "Romania"
                        },
                        new
                        {
                            CountryId = 145,
                            CountryCode = "RUS",
                            CountryName = "Russia"
                        },
                        new
                        {
                            CountryId = 146,
                            CountryCode = "RWA",
                            CountryName = "Rwanda"
                        },
                        new
                        {
                            CountryId = 147,
                            CountryCode = "KNA",
                            CountryName = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            CountryId = 148,
                            CountryCode = "LCA",
                            CountryName = "Saint Lucia"
                        },
                        new
                        {
                            CountryId = 149,
                            CountryCode = "VCT",
                            CountryName = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            CountryId = 150,
                            CountryCode = "WSM",
                            CountryName = "Samoa"
                        },
                        new
                        {
                            CountryId = 151,
                            CountryCode = "SMR",
                            CountryName = "San Marino"
                        },
                        new
                        {
                            CountryId = 152,
                            CountryCode = "STP",
                            CountryName = "Sao Tome and Principe"
                        },
                        new
                        {
                            CountryId = 153,
                            CountryCode = "SAU",
                            CountryName = "Saudi Arabia"
                        },
                        new
                        {
                            CountryId = 154,
                            CountryCode = "SEN",
                            CountryName = "Senegal"
                        },
                        new
                        {
                            CountryId = 155,
                            CountryCode = "SRB",
                            CountryName = "Serbia"
                        },
                        new
                        {
                            CountryId = 156,
                            CountryCode = "SYC",
                            CountryName = "Seychelles"
                        },
                        new
                        {
                            CountryId = 157,
                            CountryCode = "SLE",
                            CountryName = "Sierra Leone"
                        },
                        new
                        {
                            CountryId = 158,
                            CountryCode = "SGP",
                            CountryName = "Singapore"
                        },
                        new
                        {
                            CountryId = 159,
                            CountryCode = "SVK",
                            CountryName = "Slovakia"
                        },
                        new
                        {
                            CountryId = 160,
                            CountryCode = "SVN",
                            CountryName = "Slovenia"
                        },
                        new
                        {
                            CountryId = 161,
                            CountryCode = "SLB",
                            CountryName = "Solomon Islands"
                        },
                        new
                        {
                            CountryId = 162,
                            CountryCode = "SOM",
                            CountryName = "Somalia"
                        },
                        new
                        {
                            CountryId = 163,
                            CountryCode = "ZAF",
                            CountryName = "South Africa"
                        },
                        new
                        {
                            CountryId = 164,
                            CountryCode = "ESP",
                            CountryName = "Spain"
                        },
                        new
                        {
                            CountryId = 165,
                            CountryCode = "LKA",
                            CountryName = "Sri Lanka"
                        },
                        new
                        {
                            CountryId = 166,
                            CountryCode = "SDN",
                            CountryName = "Sudan"
                        },
                        new
                        {
                            CountryId = 167,
                            CountryCode = "SUR",
                            CountryName = "Suriname"
                        },
                        new
                        {
                            CountryId = 168,
                            CountryCode = "SWE",
                            CountryName = "Sweden"
                        },
                        new
                        {
                            CountryId = 169,
                            CountryCode = "CHE",
                            CountryName = "Switzerland"
                        },
                        new
                        {
                            CountryId = 170,
                            CountryCode = "SYR",
                            CountryName = "Syria"
                        },
                        new
                        {
                            CountryId = 171,
                            CountryCode = "TWN",
                            CountryName = "Taiwan"
                        },
                        new
                        {
                            CountryId = 172,
                            CountryCode = "TJK",
                            CountryName = "Tajikistan"
                        },
                        new
                        {
                            CountryId = 173,
                            CountryCode = "TZA",
                            CountryName = "Tanzania"
                        },
                        new
                        {
                            CountryId = 174,
                            CountryCode = "THA",
                            CountryName = "Thailand"
                        },
                        new
                        {
                            CountryId = 175,
                            CountryCode = "TLS",
                            CountryName = "Timor Leste"
                        },
                        new
                        {
                            CountryId = 176,
                            CountryCode = "TGO",
                            CountryName = "Togo"
                        },
                        new
                        {
                            CountryId = 177,
                            CountryCode = "TON",
                            CountryName = "Tonga"
                        },
                        new
                        {
                            CountryId = 178,
                            CountryCode = "TTO",
                            CountryName = "Trinidad and Tobago"
                        },
                        new
                        {
                            CountryId = 179,
                            CountryCode = "TUN",
                            CountryName = "Tunisia"
                        },
                        new
                        {
                            CountryId = 180,
                            CountryCode = "TUR",
                            CountryName = "Turkey"
                        },
                        new
                        {
                            CountryId = 181,
                            CountryCode = "TKM",
                            CountryName = "Turkmenistan"
                        },
                        new
                        {
                            CountryId = 182,
                            CountryCode = "TUV",
                            CountryName = "Tuvalu"
                        },
                        new
                        {
                            CountryId = 183,
                            CountryCode = "UGA",
                            CountryName = "Uganda"
                        },
                        new
                        {
                            CountryId = 184,
                            CountryCode = "UKR",
                            CountryName = "Ukraine"
                        },
                        new
                        {
                            CountryId = 185,
                            CountryCode = "ARE",
                            CountryName = "United Arab Emirates"
                        },
                        new
                        {
                            CountryId = 186,
                            CountryCode = "GBR",
                            CountryName = "United Kingdom"
                        },
                        new
                        {
                            CountryId = 187,
                            CountryCode = "USA",
                            CountryName = "United States of America"
                        },
                        new
                        {
                            CountryId = 188,
                            CountryCode = "URY",
                            CountryName = "Uruguay"
                        },
                        new
                        {
                            CountryId = 189,
                            CountryCode = "UZB",
                            CountryName = "Uzbekistan"
                        },
                        new
                        {
                            CountryId = 190,
                            CountryCode = "VUT",
                            CountryName = "Vanuatu"
                        },
                        new
                        {
                            CountryId = 191,
                            CountryCode = "VAT",
                            CountryName = "Vatican City"
                        },
                        new
                        {
                            CountryId = 192,
                            CountryCode = "VEN",
                            CountryName = "Venezuela"
                        },
                        new
                        {
                            CountryId = 193,
                            CountryCode = "VNM",
                            CountryName = "Vietnam"
                        },
                        new
                        {
                            CountryId = 194,
                            CountryCode = "YEM",
                            CountryName = "Yemen"
                        },
                        new
                        {
                            CountryId = 195,
                            CountryCode = "ZMB",
                            CountryName = "Zambia"
                        },
                        new
                        {
                            CountryId = 196,
                            CountryCode = "ZWE",
                            CountryName = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("Models.LicenseModels.DetainedLicense", b =>
                {
                    b.Property<int>("DetainedLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetainedLicenseId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DetainDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FineFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int>("LocalDrivingLicenseId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseApplicationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReleasedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DetainedLicenseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("LocalDrivingLicenseId");

                    b.HasIndex("ReleasedByEmployee");

                    b.ToTable("DetainedLicenses");
                });

            modelBuilder.Entity("Models.LicenseModels.InternationalDrivingLicense", b =>
                {
                    b.Property<int>("InternationalDrivingLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternationalDrivingLicenseId"));

                    b.Property<int>("InternationalDrivingLicenseApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("LicenseClassId")
                        .HasColumnType("int");

                    b.Property<int>("LocalDrivingLicenseId")
                        .HasColumnType("int");

                    b.HasKey("InternationalDrivingLicenseId");

                    b.HasIndex("InternationalDrivingLicenseApplicationID");

                    b.HasIndex("LocalDrivingLicenseId");

                    b.ToTable("InternationalDrivingLicenses");
                });

            modelBuilder.Entity("Models.LicenseModels.LicenseClass", b =>
                {
                    b.Property<short>("LicenseClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LicenseClassId"));

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultValidityLengthInMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("LicenseClassFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("MinimumAllowedAge")
                        .HasColumnType("tinyint");

                    b.HasKey("LicenseClassId");

                    b.ToTable("LicenseClasses");

                    b.HasData(
                        new
                        {
                            LicenseClassId = (short)1,
                            ClassDescription = "Permits non-professional drivers to operate private vehicles, tourist taxis, agricultural tractors for personal use, and light transport vehicles up to 2000 kg",
                            ClassName = "Private Driver License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 120.00m,
                            MinimumAllowedAge = (byte)18
                        },
                        new
                        {
                            LicenseClassId = (short)2,
                            ClassDescription = "For professional drivers to operate taxis and buses up to 17 passengers, in addition to all vehicles permitted under private license",
                            ClassName = "Third Class License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 150.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)3,
                            ClassDescription = "Permits operation of taxis, buses (17-26 passengers), transport vehicles, and heavy equipment. Requires 3 years experience with Third Class License",
                            ClassName = "Second Class License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 180.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)4,
                            ClassDescription = "Permits operation of all vehicle types. Requires 3 years experience with Second Class License",
                            ClassName = "First Class License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 200.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)5,
                            ClassDescription = "Permits operation of single tractors or those with agricultural trailers",
                            ClassName = "Agricultural Tractor License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 100.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)6,
                            ClassDescription = "Permits operation of metro trains and tram vehicles",
                            ClassName = "Metro/Tram License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 150.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)7,
                            ClassDescription = "Permits non-professional operation of motorcycles",
                            ClassName = "Private Motorcycle License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 80.00m,
                            MinimumAllowedAge = (byte)18
                        },
                        new
                        {
                            LicenseClassId = (short)10,
                            ClassDescription = "Permits operation of military vehicles, issued exclusively to armed forces personnel",
                            ClassName = "Military License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 0.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)11,
                            ClassDescription = "Permits operation of police vehicles, issued exclusively to police personnel",
                            ClassName = "Police License",
                            DefaultValidityLengthInMonths = 60,
                            LicenseClassFees = 0.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)12,
                            ClassDescription = "Issued to individuals responsible for testing rapid transport vehicles",
                            ClassName = "Test Driving License",
                            DefaultValidityLengthInMonths = 12,
                            LicenseClassFees = 100.00m,
                            MinimumAllowedAge = (byte)21
                        },
                        new
                        {
                            LicenseClassId = (short)13,
                            ClassDescription = "Temporary permit for individuals learning to drive vehicles",
                            ClassName = "Learner Permit",
                            DefaultValidityLengthInMonths = 3,
                            LicenseClassFees = 50.00m,
                            MinimumAllowedAge = (byte)18
                        });
                });

            modelBuilder.Entity("Models.LicenseModels.LicenseType", b =>
                {
                    b.Property<byte>("LicenseTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LicenseTypeId");

                    b.ToTable("LicenseTypes");

                    b.HasData(
                        new
                        {
                            LicenseTypeId = (byte)2,
                            Fees = 100m,
                            Title = "International"
                        },
                        new
                        {
                            LicenseTypeId = (byte)1,
                            Fees = 20m,
                            Title = "Local"
                        });
                });

            modelBuilder.Entity("Models.LicenseModels.LocalDrivingLicense", b =>
                {
                    b.Property<int>("LocalDrivingLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalDrivingLicenseId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("IssueReason")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("IssuingDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("LicenseClassId")
                        .HasColumnType("smallint");

                    b.Property<int>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalDrivingLicenseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("DriverId");

                    b.HasIndex("LicenseClassId");

                    b.ToTable("LocalDrivingLicenses");
                });

            modelBuilder.Entity("Models.Tests.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateOnly>("AppointmentDay")
                        .HasColumnType("Date");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TimeIntervalId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("TestTypeId");

                    b.HasIndex("TimeIntervalId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Models.Tests.Booking", b =>
                {
                    b.Property<int>("BookinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookinId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RetakeTestApplicationId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookinId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("LocalDrivingLicenseApplicationId");

                    b.HasIndex("RetakeTestApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Models.Tests.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TestResult")
                        .HasColumnType("bit");

                    b.HasKey("TestId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CreatedByEmployee");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Models.Tests.TestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeId"));

                    b.Property<string>("TestTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestTypeFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestTypeId");

                    b.ToTable("TestTypes");

                    b.HasData(
                        new
                        {
                            TestTypeId = 1,
                            TestTypeDescription = "This assesses the applicant's visual acuity to ensure they have sufficient vision to drive safely.",
                            TestTypeFees = 100m,
                            TestTypeTitle = "Vision"
                        },
                        new
                        {
                            TestTypeId = 2,
                            TestTypeDescription = "This test assesses the applicant's knowledge of traffic rules, road signs, and driving regulations. It typically consists of multiple-choice questions, and the applicant must select the correct answer(s). The written test aims to ensure that the applicant understands the rules of the road and can apply them in various driving scenarios.",
                            TestTypeFees = 150m,
                            TestTypeTitle = "Written Theory"
                        },
                        new
                        {
                            TestTypeId = 3,
                            TestTypeDescription = "This test evaluates the applicant's driving skills and ability to operate a motor vehicle safely on public roads. A licensed examiner accompanies the applicant in the vehicle and observes their driving performance.",
                            TestTypeFees = 250m,
                            TestTypeTitle = "Practical Street"
                        });
                });

            modelBuilder.Entity("Models.TimeInterval", b =>
                {
                    b.Property<int>("TimeIntervalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeIntervalId"));

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.HasKey("TimeIntervalId");

                    b.ToTable("TimeIntervals");

                    b.HasData(
                        new
                        {
                            TimeIntervalId = 1,
                            Hour = 9,
                            Minute = 0
                        },
                        new
                        {
                            TimeIntervalId = 2,
                            Hour = 9,
                            Minute = 15
                        },
                        new
                        {
                            TimeIntervalId = 3,
                            Hour = 9,
                            Minute = 30
                        },
                        new
                        {
                            TimeIntervalId = 4,
                            Hour = 9,
                            Minute = 45
                        },
                        new
                        {
                            TimeIntervalId = 5,
                            Hour = 10,
                            Minute = 0
                        },
                        new
                        {
                            TimeIntervalId = 6,
                            Hour = 10,
                            Minute = 15
                        },
                        new
                        {
                            TimeIntervalId = 7,
                            Hour = 10,
                            Minute = 30
                        },
                        new
                        {
                            TimeIntervalId = 8,
                            Hour = 10,
                            Minute = 45
                        },
                        new
                        {
                            TimeIntervalId = 9,
                            Hour = 11,
                            Minute = 0
                        },
                        new
                        {
                            TimeIntervalId = 10,
                            Hour = 11,
                            Minute = 15
                        },
                        new
                        {
                            TimeIntervalId = 11,
                            Hour = 11,
                            Minute = 30
                        },
                        new
                        {
                            TimeIntervalId = 12,
                            Hour = 11,
                            Minute = 45
                        },
                        new
                        {
                            TimeIntervalId = 13,
                            Hour = 12,
                            Minute = 0
                        },
                        new
                        {
                            TimeIntervalId = 14,
                            Hour = 12,
                            Minute = 15
                        },
                        new
                        {
                            TimeIntervalId = 15,
                            Hour = 12,
                            Minute = 30
                        },
                        new
                        {
                            TimeIntervalId = 16,
                            Hour = 12,
                            Minute = 45
                        },
                        new
                        {
                            TimeIntervalId = 17,
                            Hour = 13,
                            Minute = 0
                        },
                        new
                        {
                            TimeIntervalId = 18,
                            Hour = 13,
                            Minute = 15
                        },
                        new
                        {
                            TimeIntervalId = 19,
                            Hour = 13,
                            Minute = 30
                        },
                        new
                        {
                            TimeIntervalId = 20,
                            Hour = 13,
                            Minute = 45
                        },
                        new
                        {
                            TimeIntervalId = 21,
                            Hour = 14,
                            Minute = 0
                        },
                        new
                        {
                            TimeIntervalId = 22,
                            Hour = 14,
                            Minute = 15
                        },
                        new
                        {
                            TimeIntervalId = 23,
                            Hour = 14,
                            Minute = 30
                        },
                        new
                        {
                            TimeIntervalId = 24,
                            Hour = 14,
                            Minute = 45
                        });
                });

            modelBuilder.Entity("Models.Types.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("Models.UserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Models.Users.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Models.Users.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DriverId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HiredByAdmin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HiredByAdmin");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AccessFailedCount = 0,
                            Address = "Test Address 1",
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b3e27cb1-7bfb-4722-bc67-0c9c96c51d4e",
                            CountryId = 1,
                            Email = "test1@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            FourthName = "First",
                            Gender = 0,
                            ImagePath = "null",
                            LockoutEnabled = true,
                            NationalNo = "1111111111",
                            NormalizedEmail = "TEST1@TEST.COM",
                            NormalizedUserName = "TESTUSER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEPahXcemRXGRxKE3LxhXh/jtLc5gQV31AVLNkX2GAh0xArP6aYtL2TFmDaxZHUXKQw==",
                            PhoneNumber = "0777777771",
                            PhoneNumberConfirmed = true,
                            SecondName = "User",
                            SecurityStamp = "K2MDKSUEXFG6QCHLCWJLVREVWT7545X2",
                            ThirdName = "One",
                            TwoFactorEnabled = false,
                            UserName = "testuser1"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AccessFailedCount = 0,
                            Address = "Test Address 2",
                            BirthDate = new DateTime(2000, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "44f69173-726f-44d8-b4b0-7695e4bec210",
                            CountryId = 1,
                            Email = "test2@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            FourthName = "Second",
                            Gender = 1,
                            ImagePath = "null",
                            LockoutEnabled = true,
                            NationalNo = "2222222222",
                            NormalizedEmail = "TEST2@TEST.COM",
                            NormalizedUserName = "TESTUSER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEPahXcemRXGRxKE3LxhXh/jtLc5gQV31AVLNkX2GAh0xArP6aYtL2TFmDaxZHUXKQw==",
                            PhoneNumber = "0777777772",
                            PhoneNumberConfirmed = true,
                            SecondName = "User",
                            SecurityStamp = "K2MDKSUEXFG6QCHLCWJLVREVWT7545X3",
                            ThirdName = "Two",
                            TwoFactorEnabled = false,
                            UserName = "testuser2"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AccessFailedCount = 0,
                            Address = "Test Address 3",
                            BirthDate = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2f511f41-c3a1-4ebe-a55b-377487fac8b8",
                            CountryId = 1,
                            Email = "test3@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            FourthName = "Third",
                            Gender = 0,
                            ImagePath = "null",
                            LockoutEnabled = true,
                            NationalNo = "3333333333",
                            NormalizedEmail = "TEST3@TEST.COM",
                            NormalizedUserName = "TESTUSER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEPahXcemRXGRxKE3LxhXh/jtLc5gQV31AVLNkX2GAh0xArP6aYtL2TFmDaxZHUXKQw==",
                            PhoneNumber = "0777777773",
                            PhoneNumberConfirmed = true,
                            SecondName = "User",
                            SecurityStamp = "K2MDKSUEXFG6QCHLCWJLVREVWT7545X4",
                            ThirdName = "Three",
                            TwoFactorEnabled = false,
                            UserName = "testuser3"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AccessFailedCount = 0,
                            Address = "Test Address 4",
                            BirthDate = new DateTime(2000, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a98af5d4-731c-489b-851c-86f23c66b3d1",
                            CountryId = 1,
                            Email = "test4@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            FourthName = "Fourth",
                            Gender = 1,
                            ImagePath = "null",
                            LockoutEnabled = true,
                            NationalNo = "4444444444",
                            NormalizedEmail = "TEST4@TEST.COM",
                            NormalizedUserName = "TESTUSER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEPahXcemRXGRxKE3LxhXh/jtLc5gQV31AVLNkX2GAh0xArP6aYtL2TFmDaxZHUXKQw==",
                            PhoneNumber = "0777777774",
                            PhoneNumberConfirmed = true,
                            SecondName = "User",
                            SecurityStamp = "K2MDKSUEXFG6QCHLCWJLVREVWT7545X5",
                            ThirdName = "Four",
                            TwoFactorEnabled = false,
                            UserName = "testuser4"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AccessFailedCount = 0,
                            Address = "Test Address 5",
                            BirthDate = new DateTime(2000, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7c8f2e9b-4c1a-483d-b832-d35cb3f3f287",
                            CountryId = 1,
                            Email = "test5@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            FourthName = "Fifth",
                            Gender = 0,
                            ImagePath = "null",
                            LockoutEnabled = true,
                            NationalNo = "5555555555",
                            NormalizedEmail = "TEST5@TEST.COM",
                            NormalizedUserName = "TESTUSER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEPahXcemRXGRxKE3LxhXh/jtLc5gQV31AVLNkX2GAh0xArP6aYtL2TFmDaxZHUXKQw==",
                            PhoneNumber = "0777777775",
                            PhoneNumberConfirmed = true,
                            SecondName = "User",
                            SecurityStamp = "K2MDKSUEXFG6QCHLCWJLVREVWT7545X6",
                            ThirdName = "Five",
                            TwoFactorEnabled = false,
                            UserName = "testuser5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.UserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Models.UserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ApplicationModels.Application", b =>
                {
                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany("Applications")
                        .HasForeignKey("UpdatedByEmployeeId");

                    b.HasOne("Models.Users.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.ServiceFees", "ServiceFees")
                        .WithMany("Applications")
                        .HasForeignKey("ServicePurposeId", "ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ServiceFees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ApplicationModels.InternationalDrivingLicenseApplication", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LocalDrivingLicense", "LocalDrivingLicense")
                        .WithMany()
                        .HasForeignKey("LocalDrivingLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("LocalDrivingLicense");
                });

            modelBuilder.Entity("Models.ApplicationModels.LocalDrivingLicenseApplication", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LicenseClass", "LicenseClass")
                        .WithMany()
                        .HasForeignKey("LicenseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceFees", b =>
                {
                    b.HasOne("Models.ApplicationModels.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.ServicePurpose", "ServicePurpose")
                        .WithMany()
                        .HasForeignKey("ServicePurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");

                    b.Navigation("ServicePurpose");
                });

            modelBuilder.Entity("Models.LicenseModels.DetainedLicense", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LocalDrivingLicense", "LocalDrivingLicense")
                        .WithMany()
                        .HasForeignKey("LocalDrivingLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "ReleasedBy")
                        .WithMany()
                        .HasForeignKey("ReleasedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("CreatedBy");

                    b.Navigation("LocalDrivingLicense");

                    b.Navigation("ReleasedBy");
                });

            modelBuilder.Entity("Models.LicenseModels.InternationalDrivingLicense", b =>
                {
                    b.HasOne("Models.ApplicationModels.InternationalDrivingLicenseApplication", "InternationalDrivingLicenseApplication")
                        .WithMany()
                        .HasForeignKey("InternationalDrivingLicenseApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LocalDrivingLicense", "LocalDrivingLicense")
                        .WithMany()
                        .HasForeignKey("LocalDrivingLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternationalDrivingLicenseApplication");

                    b.Navigation("LocalDrivingLicense");
                });

            modelBuilder.Entity("Models.LicenseModels.LocalDrivingLicense", b =>
                {
                    b.HasOne("Models.LicenseModels.LocalDrivingLicense", "DrivingLicenseApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Countries.Country", "Country")
                        .WithMany("localDrivingLicenses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LicenseClass", "LicenseClass")
                        .WithMany()
                        .HasForeignKey("LicenseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Driver");

                    b.Navigation("DrivingLicenseApplication");

                    b.Navigation("Employee");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("Models.Tests.Appointment", b =>
                {
                    b.HasOne("Models.Tests.TestType", "TestType")
                        .WithMany("Appointments")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.TimeInterval", "TimeInterval")
                        .WithMany("Appointments")
                        .HasForeignKey("TimeIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestType");

                    b.Navigation("TimeInterval");
                });

            modelBuilder.Entity("Models.Tests.Booking", b =>
                {
                    b.HasOne("Models.Tests.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.LocalDrivingLicenseApplication", "LocalDrivingLicenseApplication")
                        .WithMany()
                        .HasForeignKey("LocalDrivingLicenseApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("RetakeTestApplicationId");

                    b.HasOne("Models.Users.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Appointment");

                    b.Navigation("LocalDrivingLicenseApplication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Tests.Test", b =>
                {
                    b.HasOne("Models.Tests.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Models.Users.Admin", b =>
                {
                    b.HasOne("Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Users.Driver", b =>
                {
                    b.HasOne("Models.Users.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Users.Employee", b =>
                {
                    b.HasOne("Models.Users.Admin", "Admin")
                        .WithMany("employees")
                        .HasForeignKey("HiredByAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Users.User", b =>
                {
                    b.HasOne("Models.Countries.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceFees", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Models.Countries.Country", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("localDrivingLicenses");
                });

            modelBuilder.Entity("Models.Tests.TestType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Models.TimeInterval", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Models.Users.Admin", b =>
                {
                    b.Navigation("employees");
                });

            modelBuilder.Entity("Models.Users.Employee", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Models.Users.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
