// <auto-generated />
using System;
using DataConfigurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataConfigurations.Migrations
{
    [DbContext(typeof(GovConnectDbContext))]
    [Migration("20241221081734_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.ApplicationModels.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ServicePurposeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ApplicationStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("ServiceCategoryId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UpdatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId");

                    b.HasIndex("UpdatedByEmployeeId");

                    b.HasIndex("UserId");

                    b.HasIndex("ServicePurposeId", "ServiceCategoryId");

                    b.ToTable("Applicataions");
                });

            modelBuilder.Entity("Models.ApplicationModels.InternationalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseId");

                    b.ToTable("InternationalDrivingLicenseApplications");
                });

            modelBuilder.Entity("Models.ApplicationModels.LocalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ReasonForTheApplication")
                        .HasColumnType("int");

                    b.Property<short>("LicenseClassId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("LicenseClassId");

                    b.ToTable("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceCategory", b =>
                {
                    b.Property<short>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ServiceCategoryId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceCategoryId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            ServiceCategoryId = (short)1,
                            Category = "Local_Driving_License"
                        },
                        new
                        {
                            ServiceCategoryId = (short)2,
                            Category = "International_Driving_License"
                        },
                        new
                        {
                            ServiceCategoryId = (short)3,
                            Category = "Passport"
                        },
                        new
                        {
                            ServiceCategoryId = (short)4,
                            Category = "International_Driving_License"
                        });
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceFees", b =>
                {
                    b.Property<byte>("ServicePurposeId")
                        .HasColumnType("tinyint");

                    b.Property<short>("ServiceCategoryId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServicePurposeId", "ServiceCategoryId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServicesFees");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServicePurpose", b =>
                {
                    b.Property<byte>("ServicePurposeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicePurposeId");

                    b.ToTable("ServicesPurposes", (string)null);

                    b.HasData(
                        new
                        {
                            ServicePurposeId = (byte)1,
                            Purpose = "New"
                        },
                        new
                        {
                            ServicePurposeId = (byte)2,
                            Purpose = "Renew"
                        },
                        new
                        {
                            ServicePurposeId = (byte)5,
                            Purpose = "Release"
                        },
                        new
                        {
                            ServicePurposeId = (byte)3,
                            Purpose = "Replacement_For_Damage"
                        },
                        new
                        {
                            ServicePurposeId = (byte)4,
                            Purpose = "Replacement_For_Lost"
                        },
                        new
                        {
                            ServicePurposeId = (byte)6,
                            Purpose = "Retake_Test"
                        });
                });

            modelBuilder.Entity("Models.LicenseModels.DetainedLicense", b =>
                {
                    b.Property<int>("DetainedLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetainedLicenseId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DetainDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FineFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int>("ReleaseApplicationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReleasedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DetainedLicenseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("LicenseId");

                    b.HasIndex("ReleasedByEmployee");

                    b.ToTable("DetainedLicenses");
                });

            modelBuilder.Entity("Models.LicenseModels.InternationalDrivingLicense", b =>
                {
                    b.Property<int>("InternationalDrivingLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternationalDrivingLicenseId"));

                    b.Property<int>("InternationalDrivingLicenseApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("LicenseClassId")
                        .HasColumnType("int");

                    b.Property<int>("LocalDrivingLicenseId")
                        .HasColumnType("int");

                    b.HasKey("InternationalDrivingLicenseId");

                    b.HasIndex("InternationalDrivingLicenseApplicationID");

                    b.HasIndex("LocalDrivingLicenseId");

                    b.ToTable("InternationalDrivingLicenses");
                });

            modelBuilder.Entity("Models.LicenseModels.LicenseClass", b =>
                {
                    b.Property<short>("LicenseClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LicenseClassId"));

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultValidityLengthInMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("LicenseClassFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("MinimumAllowedAge")
                        .HasColumnType("tinyint");

                    b.HasKey("LicenseClassId");

                    b.ToTable("LicenseClasses");
                });

            modelBuilder.Entity("Models.LicenseModels.LicenseType", b =>
                {
                    b.Property<byte>("LicenseTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LicenseTypeId");

                    b.ToTable("LicenseTypes");

                    b.HasData(
                        new
                        {
                            LicenseTypeId = (byte)2,
                            Fees = 100m,
                            Title = "International"
                        },
                        new
                        {
                            LicenseTypeId = (byte)1,
                            Fees = 20m,
                            Title = "Local"
                        });
                });

            modelBuilder.Entity("Models.LicenseModels.Local_Driving_License", b =>
                {
                    b.Property<int>("LocalDrivingLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalDrivingLicenseId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("IssueReason")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("IssuingDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("LicenseClassId")
                        .HasColumnType("smallint");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalDrivingLicenseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("DriverId");

                    b.HasIndex("LicenseClassId");

                    b.ToTable("LocalDrivingLicenses");
                });

            modelBuilder.Entity("Models.Test.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestAppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("TestResult")
                        .HasColumnType("bit");

                    b.Property<int?>("TestTypeId")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("TestAppointmentId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Models.Test.TestAppointment", b =>
                {
                    b.Property<int>("TestAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestAppointmentId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("LocalDrivingLicenseApplicationId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RetakeTestApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.HasKey("TestAppointmentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedByEmployeeId");

                    b.HasIndex("LocalDrivingLicenseApplicationId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("TestAppointments");
                });

            modelBuilder.Entity("Models.Test.TestType", b =>
                {
                    b.Property<int>("TestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeId"));

                    b.Property<string>("TestTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TestTypeFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TestTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestTypeId");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("Models.Types.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Models.Types.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<int>("TypeName")
                        .HasColumnType("int");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("Models.UserRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Models.Users.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Models.Users.Driver", b =>
                {
                    b.Property<Guid>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DriverId");

                    b.HasIndex("CreatedByEmployee");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Models.Users.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("HiredByAdmin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("HiredByAdmin");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.UserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Models.UserRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ApplicationModels.Application", b =>
                {
                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("UpdatedByEmployeeId");

                    b.HasOne("Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.ServiceFees", "ServiceFees")
                        .WithMany("Applications")
                        .HasForeignKey("ServicePurposeId", "ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ServiceFees");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ApplicationModels.InternationalDrivingLicenseApplication", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.Local_Driving_License", "Local_Driving_License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Local_Driving_License");
                });

            modelBuilder.Entity("Models.ApplicationModels.LocalDrivingLicenseApplication", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LicenseClass", "LicenseClass")
                        .WithMany()
                        .HasForeignKey("LicenseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceFees", b =>
                {
                    b.HasOne("Models.ApplicationModels.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.ServicePurpose", "ApplicationPurpose")
                        .WithMany()
                        .HasForeignKey("ServicePurposeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationPurpose");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Models.LicenseModels.DetainedLicense", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.Local_Driving_License", "Local_Driving_License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "ReleasedBy")
                        .WithMany()
                        .HasForeignKey("ReleasedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("CreatedBy");

                    b.Navigation("Local_Driving_License");

                    b.Navigation("ReleasedBy");
                });

            modelBuilder.Entity("Models.LicenseModels.InternationalDrivingLicense", b =>
                {
                    b.HasOne("Models.ApplicationModels.InternationalDrivingLicenseApplication", "InternationalDrivingLicenseApplication")
                        .WithMany()
                        .HasForeignKey("InternationalDrivingLicenseApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.Local_Driving_License", "Local_Driving_License")
                        .WithMany()
                        .HasForeignKey("LocalDrivingLicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternationalDrivingLicenseApplication");

                    b.Navigation("Local_Driving_License");
                });

            modelBuilder.Entity("Models.LicenseModels.Local_Driving_License", b =>
                {
                    b.HasOne("Models.LicenseModels.Local_Driving_License", "DrivingLicenseApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Types.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.LicenseModels.LicenseClass", "LicenseClass")
                        .WithMany()
                        .HasForeignKey("LicenseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Driver");

                    b.Navigation("DrivingLicenseApplication");

                    b.Navigation("Employee");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("Models.Test.Test", b =>
                {
                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Test.TestAppointment", "TestAppointment")
                        .WithMany()
                        .HasForeignKey("TestAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Test.TestType", null)
                        .WithMany("Tests")
                        .HasForeignKey("TestTypeId");

                    b.Navigation("Employee");

                    b.Navigation("TestAppointment");
                });

            modelBuilder.Entity("Models.Test.TestAppointment", b =>
                {
                    b.HasOne("Models.ApplicationModels.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationModels.LocalDrivingLicenseApplication", "LocalDrivingLicenseApplication")
                        .WithMany()
                        .HasForeignKey("LocalDrivingLicenseApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Test.TestType", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Employee");

                    b.Navigation("LocalDrivingLicenseApplication");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("Models.Users.Admin", b =>
                {
                    b.HasOne("Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Users.Driver", b =>
                {
                    b.HasOne("Models.Users.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("CreatedByEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Users.Employee", b =>
                {
                    b.HasOne("Models.Types.EmployeeType", null)
                        .WithMany("Employee")
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("Models.Users.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("HiredByAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Users.User", b =>
                {
                    b.HasOne("Models.Types.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Models.ApplicationModels.ServiceFees", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Models.Test.TestType", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Models.Types.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Types.EmployeeType", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
